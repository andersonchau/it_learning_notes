Commonly used/practical Oracle SQL at work
And some database stuff.

#Convert date string to DATETIME :
SELECT TO_DATE('2015/05/15 8:30:25', 'YYYY/MM/DD HH:MI:SS') FROM dual;

#Beginning of YEAR, MONTH, DAY : 
SELECT TRUNC(TO_DATE('22-AUG-03'), 'YEAR') FROM DUAL;
SELECT TRUNC(TO_DATE('22-JAN-03'), 'MONTH') FROM DUAL;

#Compare same month
SELECT d1,d2 FROM table1 WHERE TRUNC(TO_DATE(d1), 'MONTH') = TRUNC(TO_DATE(d2), 'MONTH');

#last 30 days,count at day start :
SELECT productid FROM product where purchase_date > trunc(sysdate-30);
SELECT productid FROM product where purchase_date > trunc(to_date('03/06/2011','mm/dd/yyyy'));


#next one hour : 
SELECT TO_CHAR(sysdate+1/24),'hh:mi:ss') FROM DUAL;

# If first value NULL, use second , for NVL2, if 1->2->3
SELECT NVL(d1,'no-date') from table1;
SELECT NVL(d1,d2) from table1;
SELECT NVL(d1,d2,'nothing') from table1;

# insert with seq 
INSERT INTO tbl1 (d1,d2) VALUES (my_seq.nextval,'Hello');


# when member_id field is the same, we just want update, not insert, we use MERGE statement
# below is the template example :

MERGE INTO member_staging x
USING (SELECT member_id, first_name, last_name, rank FROM members) y
ON (x.member_id  = y.member_id)
WHEN MATCHED THEN
    UPDATE SET x.first_name = y.first_name, 
                        x.last_name = y.last_name, 
                        x.rank = y.rank
    WHERE x.first_name <> y.first_name OR 
           x.last_name <> y.last_name OR 
           x.rank <> y.rank 
WHEN NOT MATCHED THEN
    INSERT(x.member_id, x.first_name, x.last_name, x.rank)  
    VALUES(y.member_id, y.first_name, y.last_name, y.rank);

#String append : 
SELECT first_name || ' ' || last_name AS customer_name FROM customers;

Some notes :

# direct connection with SQL plus 
username/password@host:port/SID
host_ip:port/SID

# Money Data 
type NUMBER(10,2)

# In Oracle, by default empty String '' equals null

# Excel generated SQL statement example
https://chandoo.org/wp/sql-insert-update-statements-from-csv-files/ 

# JDBC lock table/row 
https://stackoverflow.com/questions/46995155/select-for-update-with-jdbc
1. SELECT * FROM TABLE WHERE id = 10 for update;
2. setAutoCommit(false), need to call commit() explicitly, ref is wrong 
3. CONCUR_UPDATABLE 
4. need to close() if not using try block
5. remember to call updateRow(), but updateRow() will not commit() because setAutoCommit(false)

# VARCHAR2 depends on NLS_CHARACTERSET         
# NVARCHAR2 NLS_NCHAR_CHARACTERSET

# oracle VIEW, view can be live update
CREATE VIEW view_name AS
  SELECT columns
  FROM tables
  [WHERE conditions];

#Setautocommit false -> a transaction is started, need commit. otherwise commit on every statement

#AUTO_INCREMENT in Oracle 
>= Oracle12c
create table t1 (
    c1 NUMBER GENERATED by default on null as IDENTITY,
    c2 VARCHAR2(10)
    );
	
create table t1 (
    c1 NUMBER GENERATED ALWAYS as IDENTITY(START with 1 INCREMENT by 1), # no insert to this column, real AUTO_increment
    c2 VARCHAR2(10)
    );

#Or Oracle 12
CREATE SEQUENCE dept_seq START WITH 1;
CREATE TABLE departments (
  ID           NUMBER(10)    DEFAULT dept_seq.nextval NOT NULL,
  DESCRIPTION  VARCHAR2(50)  NOT NULL);

# check table lock
  select
   c.owner,
   c.object_name,
   c.object_type,
   b.sid,
   b.serial#,
   b.status,
   b.osuser,
   b.machine
from
   v$locked_object a ,
   v$session b,
   dba_objects c
where
   b.sid = a.session_id
and
   a.object_id = c.object_id;
   
# list all table, can use WHERE
SELECT owner, table_name FROM all_tables;


 1.	
Invoke SQL*Plus.

 

 2.	
Query V$SESSION supplying the username for the session you want to terminate:

SELECT SID, SERIAL#, STATUS, SERVER
FROM V$SESSION
WHERE USERNAME = '<username>'

3.	
Execute the ALTER SYSTEM command to terminate the session:

ALTER SYSTEM KILL SESSION '<sid, serial#>'

 

 4.	
Query V$SESSION:

SELECT SID, SERIAL#, STATUS, SERVER
FROM V$SESSION
WHERE USERNAME = '<username>'
Move your mouse over this icon to see the image

 

 5.	
After PMON has cleaned up after the session, the row is removed from V$SESSION:

SELECT SID, SERIAL#, STATUS, SERVER
FROM V$SESSION
WHERE USERNAME = '<username>'
Move your mouse over this icon to see the image

=======================================================================================
#simple table data copy/backup
create table xyz_new as select * from xyz;

=======================================================================================
# SQL plus output -> file.
SET PAGESIZE 0
SET FEEDBACK OFF
SET HEAD OFF
set trimout on;
set trimspool on;
SET LINESIZE 4000 
SET ECHO OFF
SET SERVEROUTPUT ON
SPOOL output.txt
select user_id from users where user_id = 13448493 order by createtime;
SPOOL OFF # a flush here
EXIT
=======================================================================================
# Run sql script 
@c:\sql_script\sql_script.txt