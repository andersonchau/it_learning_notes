Mongodb learning/ notes 
mongodb client to atlas : mongo "mongodb+srv://cluster0.tomvt.mongodb.net/demo" --username anson2004


commands : 

>db # show all databases 
>db.stats() # gives statistics information
>show dbs # show all databases
>db.dropDatabase() # drop db, use it after use demo
>db.collection.drop() # drop a table

>use demo # switch db to demo 
>show collections # list all tables 

RMDBS       MongoDB
database	database	
table	collection	
row		document	
column	field	
index	index	索引
table joins	 	表连接,MongoDB不支持
primary key	primary key


> db.myNewCollection1.insertOne( { x: 1 } ) # insert a document(row) in collection(table)
result : 
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5f9f7493bb442f625c915018")
}

=====================================================================================
> show collections/db.getCollectionNames()/show tables # show all tables.  
> db.myNewCollection1.insertOne( { y: 1 } )
> db.myNewCollection1.insertOne( { y: 1,y:2 } ) # this is OKAY!? , gives y : 2
> db.myNewCollection1.insertOne( { y: "1" } ) # note data type 1 =/="1" , including query
> db.myNewCollection1.insertOne( { y: {z:10} } )
> db.myNewCollection1.insertOne( { y: 1,x:2 } ) 

>db.inventory.insertMany([
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" }
]);

=====================================================================================
Query : 

> db.myNewCollection1.find(); # select all entries in table myNewCollection1
{ "_id" : ObjectId("5f9f7493bb442f625c915018"), "x" : 1 }
{ "_id" : ObjectId("5f9f7714809f9ae8f088be93"), "y" : 1 }
{ "_id" : ObjectId("5f9f79babcdacadbefa329e4"), "y" : { "z" : 10 } }
# notice, can have different "schema"

> db.myNewCollection1.find(); # gives all results 
> db.myNewCollection1.find({"y.z":10}) # access deeper elements{ "_id" : ObjectId("5f9f79babcdacadbefa329e4"), "y" : { "z" : 10 } }
> db.myNewCollection1.find( { "y.z": { $gt: 5 } } )
> db.myNewCollection1.find( { "x": 2, "y":1 } ) # default AND condition
> db.myNewCollection1.find(
  { $or: [ { "x": 2 }, { "y": 1 } ] }
) # or operations 
db.inventory.find( { status: { $in: [ "A", "D" ] } } ) # WHERE STATUS IN ("A","D")
db.inventory.find( { status: "A", qty: { $lt: 30 } } ) # WHERE status = "A"  AND qty < 30
db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )
db.inventory.find( {
     status: "A",
     $or: [ { qty: { $lt: 30 } }, { item: /^p/ } ]
} ) # SELECT * FROM inventory WHERE status = "A" AND ( qty < 30 OR item LIKE "p%")
# or use findOne

# projection 
db.writers.find( { "author": "Gaurav Mandes" }, { _id:0,  author:1, title:1 } )
=====================================================================================
Date : 
> db.test.insert({date: ISODate()}) 
> db.test.insert({date: new Date()})
{ "_id" : ObjectId("..."), "date" : ISODate("2014-02-10T10:50:42.389Z") }
{ "_id" : ObjectId("..."), "date" : ISODate("2014-02-10T10:50:57.240Z") }


Sort :
db.COLLECTION_NAME.find().sort({KEY:1}) # 1 ascending, 2 descending
db.COLLECTION_NAME.find({},{"title":1,_id:0}).sort({"likes":-1})
Limit :
db.COLLECTION_NAME.find({},{"title":1,_id:0}).sort({"likes":-1}).limit(10)
db.COLLECTION_NAME.find({},{"title":1,_id:0}).sort({"likes":-1}).limit(10).skip(2).pretty();

Remove :
db.COLLECTION_NAME.deleteMany({'title':'ABCDE'}) 
db.COLLECTION_NAME.deleteOne({'title':'ABCDE'})
db.COLLECTION_NAME.remove({}) # remove all stuff
db.COLLECTION_NAME.remove({"name":"joe"}) # remove all stuff
update :
db.COLLECTION_NAME.update({'title':'AAAAA'},{$set:{'title':'BBBBBB'}})
db.musicians.update({_id: 4},{$set: { instrument: ["Vocals", "Violin", "Octapad"] }})



// create unique index
db.members.createIndex( { "user_id": 1 }, { unique: true } )
db.members.createIndex( { "user_id": 1 } ) // just index , improve performance


aggregrate 

db.writers.aggregate([{$group : {_id : "$author", TotalBooksWritten : {$sum : 1}}}])
select count(*) from writers group by AUTHOR;


Left Join :
===============================================================
SELECT user._id, user.name, sum(order.amount) from user
LEFT JOIN order on user._id = order.user_id
<=>
db.getCollection('user').aggregate([
   {$lookup:
      {
         as: 'orders',
         from: 'order',
         localField: "_id",
         foreignField: "user_id"
     }
  }])
results :
[
    {
        "_id" : 1,
        "name" : "mlwmlw",
        "orders" : [ 
            {
                "_id" : 1,
                "user_id" : 1,
                "amount" : "300"
            }, 
            {
                "_id" : 3,
                "user_id" : 1,
                "amount" : 500
            }
        ]
    }....
]
===============================================================
JOIN ON 
db.userInfo.aggregate([
 { $lookup:
     {
       from: "address", <-- userInfo doc join on address doc 
       let: { the_city: "$city", the_name: "$name"}, <-- rename address fields , later referenced by $$
       pipeline: [
            { $match:
                { $expr:
                    { $and:
                        [
                           { $gt: [ "$city", "$$the_city"] }, $city is foreign field
                           { $eq: ["$$the_name", "$contact_name" ] }
                        ]
                    }
                }
            }
        ],
        as: "address" <--- in JSON, join field is address : 
        }
 }
]).pretty();

db.getCollection('user').aggregate([
   {$lookup:
      {
         as: 'orders', 
         from: 'order',
         let: { 
            user_id: "$_id"
         },
         pipeline: [{
            $match: {
               $expr: {
                  $eq: [ "$user_id", "$$user_id" ]
               }
            },
         }, {
           $sort: {"_id": -1}
         },{
           $limit: 1
        }]
 
     }
  }])
  
===============================================================

db.car.findAndModify({
query: { name: "Alto" },
sort: { cno: 1 },
update: { $inc: { speed: 10 } },
})